# MC_on_EC2

## Overview
MC_on_EC2 is a promise-based wrapper for the AWS V3 Typescript SDK that makes it easy to manage Minecraft servers.
### Features
API includes functions that allow you to:
* Launch
* Stop
* Start
* Reboot
* Terminate 

A 1.20.4 Minecraft server will be running at all times when the instance is functional and will be preserved through stoppage.
## Usage
To install through NPM, run the following command:
```
npm i MC_on_EC2
```
In order to use this package you must be authenticated with AWS. Follow [this link](https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/setting-credentials-node.html) for the latest best practices.
## API
### Function
```
createServer(playerCount: number): Promise<server>
```
This function will create an EC2 instance running a version 1.20.4 Minecraft server. Networking security will be correctly configured and an elastic IP will be created to maintian the IP address through instance restarts.
### Input
**playerCount:** a number greater than 1 that indicated the maximum expected player count. This will determine the EC2 instance type to launch as follows:
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 < playerCount < 10 = c6i.large
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10 < playerCount < 20 = c6i.xlarge
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20 < playerCount = c6i.2xlarge

### Output
**Promise\<server>:** This promise will conform to the [server](#server) interface. This promise will resolve once the server is fully functional. This promise will reject if there are any errors with the AWS call.
### Example
```
import { createServer } from "MC_on_EC2";

createServer(5)
.then((result)=>console.log(result)) // {id: "i-example", ip: "1.1.1.1"}
.catch((error)=> console.log(error)); // May reject if the user has not completed AWS authentication procedures.
```

### Function
```
stopServer(instanceId: string): Promise<void>
```
This function will stop the specified server. This will preserve the play-state of the game for all players, but will minimize the hosting cost when the server is not in use.
### Input
**instanceId:** A valid EC2 instance ID. Intended to be used in tandem with the output of the createServer function.
### Output
**Promise\<void>:** This promise will resolve once AWS received the stop command. This promise will reject if there are any errors with the AWS call.
### Example
```
import { stopServer } from "MC_on_EC2";

stopServer("i-example")
.catch((error)=> console.log(error)); // May reject if the user has not followed AWS authentication procedures.
```

### Function
```
startServer(instanceId: string): Promise<void>
```
This function will start the specified server. This is intended to be used after the stopServer function in order to resume server functionality.
### Input
**instanceId:** A valid EC2 instance ID. Intended to be used in tandem with the output of the createServer function.
### Output
**Promise\<void>:** This promise will resolve once the server is fully functional. This promise will reject if there are any errors with the AWS call.
### Example
```
import { startServer } from "MC_on_EC2";

startServer("i-example")
.catch((error)=> console.log(error)); // May reject if the user has not followed AWS authentication procedures.
```

### Function
```
rebootServer(instanceId: string): Promise<void>
```
This function will restart the specified EC2 instance in case of issues with the operating system or Minecraft server.
### Input
**instanceId:** A valid EC2 instance ID. Intended to be used in tandem with the output of the createServer function.
### Output
**Promise\<void>:** This promise will resolve once the server is fully functional. This promise will reject if there are any errors with the AWS call.
### Example
```
import { rebootServer } from "MC_on_EC2";

rebootServer("i-example")
.catch((error)=> console.log(error)); // May reject if the user has not followed AWS authentication procedures.
```

### Function
```
terminateServer(instanceId: string): Promise<void>
```
This function will terminate the specified EC2 instance and associated elastic IP.
<br>
**Warning:** This is not reversible and the game state will be lost.
<br>
**Warning:** This will terminate both the instance and the elastic IP. Use carefully when deleting servers not generated using this module.

### Input
**instanceId:** A valid EC2 instance ID. Intended to be used in tandem with the output of the createServer function.
### Output
**Promise\<void>:** This promise will resolve once AWS has recieved the termination command. This promise will reject if there are any errors with the AWS call.
### Example
```
import { terminateServer } from "MC_on_EC2";

terminateServer("i-example")
.catch((error)=> console.log(error)); // May reject if the user has not followed AWS authentication procedures.
```
## Types
### server
```
interface server {
    'id': string,
    'ip': string;
}
```
The id declaration represents the AWS EC2 instance ID. The ip declaration represents the elastic IP associated with the instance.
## License
[MIT](https://github.com/LanderDuncan/MC_on_EC2/blob/main/LICENSE)